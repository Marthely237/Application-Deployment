# -*- coding: utf-8 -*-
"""Model Development & Training_Marthely Nguimeya.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lhjtcHmZ37buqa0OWphX_Tol_9U7o0Vq

**Color Detection Project**

**Importing Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np
import cv2
from collections import Counter
from skimage.color import rgb2lab, deltaE_cie76
import os

# %matplotlib inline

"""**Using OpenCV**"""

os.chdir("/content/drive/MyDrive/Images")

os.getcwd()

os.listdir("/content/drive/MyDrive/Images")

image = cv2.imread('/content/drive/MyDrive/Images/colorpic.jpg')
print("The type of this input is {}".format(type(image)))
print("Shape: {}".format(image.shape))
plt.imshow(image)

"""**BGR to RGB image conversion**"""

image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image)

"""**BGR to Grayscale Image Conversion**"""

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.imshow(gray_image, cmap='gray')

"""***To resize the image if too big***"""

resized_image = cv2.resize(image, (1000, 1000))
plt.imshow(resized_image)

"""**Color Identification**

***Fetching colors from images***
"""

def get_colors(image, number_of_colors, show_chart):
    
    modified_image = cv2.resize(image, (600, 400), interpolation = cv2.INTER_AREA)
    modified_image = modified_image.reshape(modified_image.shape[0]*modified_image.shape[1], 3)
    
    clf = KMeans(n_clusters = number_of_colors)
    labels = clf.fit_predict(modified_image)
    
    counts = Counter(labels)
    # sort to ensure correct color percentage
    counts = dict(sorted(counts.items()))
    
    center_colors = clf.cluster_centers_
    # We get ordered colors by iterating through the keys
    ordered_colors = [center_colors[i] for i in counts.keys()]
    hex_colors = [RGB2HEX(ordered_colors[i]) for i in counts.keys()]
    rgb_colors = [ordered_colors[i] for i in counts.keys()]

    if (show_chart):
        plt.figure(figsize = (8, 6))
        plt.pie(counts.values(), labels = hex_colors, colors = hex_colors)
    
    return rgb_colors

"""***Function for fetching the image in RGB Colorspace***"""

image_path = os.listdir('/content/drive/MyDrive/Images')

def get_image(image_path):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    return image

"""***RBG to HEX conversion function***"""

def RGB2HEX(color):
    return "#{:02x}{:02x}{:02x}".format(int(color[0]), int(color[1]), int(color[2]))

get_colors(get_image('/content/drive/MyDrive/Images/colorpic.jpg'), 15, True)

"""**Searching Images Using Colors**

***Image Dict for Further Color Searching***
"""

Images = '/content/drive/MyDrive/Images'
COLORS = {
    'red' : [255, 0, 0],
    'snow' : [255, 250, 250],
    'green' : [0, 139, 69]
}
images = []

for file in os.listdir("/content/drive/MyDrive/Images"):
    if not file.startswith('.'):
        images.append(get_image(os.path.join(Images, file)))

"""***List Of Images***"""

plt.figure(figsize=(20, 10))
for i in range(len(images)):
    plt.subplot(1, len(images), i+1)
    plt.imshow(images[i])

"""***Function For Matching Image By Different Colors***"""

def match_image_by_color(image, color, threshold = 60, number_of_colors = 10): 
    
    image_colors = get_colors(image, number_of_colors, False)
    selected_color = rgb2lab(np.uint8(np.asarray([[color]])))

    select_image = False
    for i in range(number_of_colors):
        curr_color = rgb2lab(np.uint8(np.asarray([[image_colors[i]]])))
        diff = deltaE_cie76(selected_color, curr_color)
        if (diff < threshold):
            select_image = True
    
    return select_image

"""***Function For Showing Selected Images***"""

def show_selected_images(images, color, threshold, colors_to_match):
    index = 1
    
    for i in range(len(images)):
        selected = match_image_by_color(images[i],
                                        color,
                                        threshold,
                                        colors_to_match)
        if (selected):
            plt.subplot(1, 5, index)
            plt.imshow(images[i])
            index += 1

"""***Search Images Containing snow Color***"""

plt.figure(figsize = (20, 10))
show_selected_images(images, COLORS['snow'], 60, 5)

"""***Search Images Containing red Color***"""

plt.figure(figsize = (20, 10))
show_selected_images(images, COLORS['red'], 60, 5)

"""***Search Images Containing green Color***"""

plt.figure(figsize = (20, 10))
show_selected_images(images, COLORS['green'], 60, 5)

"""***Getting All Colors From bracelet Image***"""

get_colors(get_image('/content/drive/MyDrive/Images/bracelet.jpg'),16 , True)

image1 = cv2.imread('/content/drive/MyDrive/Images/plant.jpg')
print("The type of this input is {}".format(type(image)))
print("Shape: {}".format(image.shape))
plt.imshow(image1)

image2 = cv2.cvtColor(image1, cv2.COLOR_BGR2RGB)
plt.imshow(image2)

get_colors(get_image('/content/drive/MyDrive/Images/plant.jpg'),16 , True)